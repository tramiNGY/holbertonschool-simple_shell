.\" Manpage for shell
.TH shell 1 "9 January 2025" "version 1.0" "shell manpage"
.SH NAME
.B shell
- execute commands in a shell environment
.SH SYNOPSIS
#include "shell.h"
.PP
int main(int argc, char **argv, char **env)
.SH DESCRIPTION
This program simulates a basic shell that reads commands from the user, searches for executables
in the directories listed in the PATH environment variable, and then runs them in a child process.
.PP
The shell supports simple command parsing and handles basic shell features like reading input,
forking child processes, and executing commands from a list of directories. It allows for interacting
with the terminal, providing a prompt when running in interactive mode.
.PP
The shell handles the following functionality:
- Reads a line of input from the user
- Parses the command into arguments
- Finds the executable for the command by searching through directories in PATH
- Executes the command in a child process
- Waits for the child process to finish and handles errors
- Frees allocated memory for the list of directories and other dynamic resources
.SH ENVIRONMENT
The shell uses the following environment variable:
.PP
.I PATH
A colon-separated list of directories that the shell uses to search for executable files.
The shell searches for commands by checking each directory listed in PATH. The search stops when
an executable matching the command is found.
.SH EXIT STATUS
The program exits with:
.PP
- 0 if the command is executed successfully.
.PP
- 1 if an error occurred during command execution (e.g., command not found, fork failure).
.SH FUNCTIONS
.IP "add_node_end"
Add a new node to the end of the linked list.
.PP
Arguments:
- head: pointer to the head of the linked list
- str: string to add to the list
.PP
Returns:
- The new node if successful, or NULL if memory allocation fails.
.IP "get_full_path"
Search for an executable in directories listed in PATH.
.PP
Arguments:
- command: the command to search for
- head: pointer to the head of the list of directories
.PP
Returns:
- The full path to the executable or NULL if not found.
.IP "readline"
Read a line of input from stdin.
.PP
Returns:
- The input line or NULL if EOF is reached.
.IP "_strtok"
Tokenize a string into arguments using space as a delimiter.
.PP
Arguments:
- command: string to be split into arguments
.PP
Returns:
- A pointer to an array of argument strings.
.IP "process_command"
Handle the execution of a command entered by the user.
.PP
Arguments:
- command: string entered by the user
- head: pointer to the head of a list of directories
- env: environment variables (including PATH)
.PP
Returns:
- None. Executes the command in a child process or prints an error message if the
command is not found.
.IP "free_list"
Free memory allocated to the list of directories.
.PP
Arguments:
- head: pointer to the head of the list to free
.PP
Returns:
- None.
.IP "set_path_var"
Tokenizes the PATH environment variable and adds directories to the list.
.PP
Arguments:
- path_var: the value of the PATH variable
- head: pointer to the head of the linked list of directories
.PP
Returns:
- None.
.SH EXAMPLES
Run the shell interactively:
.PP
$ shell
:) ls
(output of the 'ls' command)
.PP
Execute a command:
.PP
$ shell
:) echo Hello, World!
Hello, World!
.PP
In case of command not found:
.PP
$ shell
:) non_existing_command
Command not found
.SH BUGS
.PP
- Does not handle advanced shell features like pipes, redirection, or background processes.
.PP
- Does not handle environment variable expansion within commands.
.SH NOTES
All your files are compiled on Ubuntu 20.04 LTS using the following command:
.PP
gcc -Wall -Werror -Wextra -pedantic -std=gnu89 -Wno-format *.c
.SH SEE ALSO
man execve(2), fork(2), waitpid(2), stat(2), getline(3), strtok(3)
.SH AUTHOR(s)
Written by Tom DIBELLONIO and Tra Mi NGUYEN.
